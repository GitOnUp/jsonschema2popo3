#!/usr/bin/env/python

{% if model.import_enum %}
import enum
{% endif %}

class {{model.name}}:

{% for prop in model.properties if prop.enum %}
    {{prop.enum._name}} = enum.Enum('{{prop.enum._name}}', '{{prop.enum._values}}', module=__name__)
{% endfor %}

{% if model.defaults %}
    def __init__(self
{% for prop in model.defaults %}
            , {{prop._name}}=None
{% endfor %}
            ):
{% for prop in model.defaults %}
        self.__{{prop._name}} = {{prop._value}}
{% endfor %}
{% endif %}
    
{% for prop in model.properties %}
    def _get_{{prop._name}}(self):
        return self.__{{prop._name}}
    def _set_{{prop._name}}(self, value):
{% if prop._type %}
        if not isinstance(value, {{prop._type}}):
            raise TypeError("{{prop._name}} must be set to {{prop._type}}")
{% endif %}
{% if prop.enum %}
        if value in self.{{prop.enum._name}}.__members__:
            self.__type = value
        else:
            raise ValueError("Value {} not in {{prop.enum._name}} list".format(value))
{% else %}
        self.__{{prop._name}} = value
{% endif %}
    {{prop._name}} = property(_get_{{prop._name}}, _set_{{prop._name}})
    
{% endfor %}
